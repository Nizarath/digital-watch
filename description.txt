Some notes:

1. It is unclear for me how astute my level of understanding was in 2014,
I will reedit and restructure the description, to emphasize more on the
basics, not on my eagerness to show the tool, as it was then.

2. I described 2 main approaches for assessing time intervals:

- the one based on CPU frequency (makes impossible separate activity,
  and makes code dependent on particular frequency, while they differ
  substantially even for the same architecture, though it is not true 
  for this primitive chip AT90S1200)
- the one based on a special register (or a separate timer chip in the case
  of personal computers)

The other one is actually a high level usage of functions provided by
operating system (like system call or library function invoking it
internally), but they themselves always rely on a driver code from the lower
kernel parts, normally managing the timer (see the 2nd way) or so.

Also, the 3rd approach can be done in either language, the 2nd one is
accessible directly only in assembly language for this architecture, 
and the first one theoretically can be done in either language, but it is very 
hard to anticipate how compiler will translate everything while writing in a
HLL, so asm is still a better way here (though for primitive systems for which
this approach is used the compiler can also be enough primitive -- or,
conversely, intentionally written in such a way, that a programmer can tell
him to create such a code, that will correspond to particular time frames).

--

Там две секции - ожидания наступления минуты, в ходе которой проверяются кнопки и рисуется время на индикаторах, и секция настройки.
Протеус скотина не смотря на Core-i5 2300 с 4 ядрами (обязаны такие мощные программы-симуляторы многопоточность поддерживать!) отказался симулировать в реальном времени счет времени, но я сбавил интервал в коде до 0.1 сек и в логах что симулятор выдает непрерывно смотрел когда будет 0.1, 0.2, 0.3 и т.п. сек, и скажу что сделал счет правильно, время с очень большой точностью (там логи до миллионных долей секунды наверное) накапливается.
Ну там ничего сложного и нет - есть 2 метода отсчета времени (в BIOS ПК, у которого ОС при старте по ходу и спрашивает его, время тоже вполне может быть каким-то из них считается): 
- "БЕЗТАЙМЕРНОЕ" ИЗМЕРЕНИЕ.
 зная частоту железки, посчитать сколько тактов надо угрохать. Геморный метод, надо точно знать сколько какая команда выполняется, правильное число итераций и команд в итерации цикла задержки подобрать, и кроме того - в современных ПК с параллелизмом высоким многие участки будут распараллелены и выполнены быстрее чем на старом одноядерном процессоре даже ТАКОЙ ЖЕ частоты (частота заметь на около 3 ГГц держится уже почти полтора десятка лет, Pentium4 еще в 2002 году вроде достиг 3ГГц, может вру в датах). Именно потому старые игры под DOS, где задержки для например процессора i80486 (1989) именно циклами, то бишь просиранием тактов, и делались, на новых процессорах играют с завышенной скоростью, что перед глазами все проносится и среагировать не успеваешь, надо специально перенастраивать под новое железо настройки, ну а игровой симулятор DOSBox вроде сам отлично симулирует под старое железо.
Но для микроконтроллеров без всякой многоядерности и прочего частота процессора совершенно точно говорит о том, сколько будет выполняться команда. Так что там до сих пор задержки часто циклами формируют.
- "ТАЙМЕРНОЕ" ИЗМЕРЕНИЕ
я на нем программу для часов и делал. Есть регистр-таймер (в старой микросхеме AVR AT90S1200 которую я изучаю это 8-битный регистр TCNT0), и он считает с ЗАДАННОЙ в регистре TCCR0 частотой, а не обязательно с частотой самой микросхемы! Я задал например 2400 Hz, там меньше нельзя, чтобы меньше тиков гробить на минутную задержку, а значит - меньшее число регистров счетчиков (к примеру если TCNT0 досчитал до 256 он обнуляется, и если это так то уменьшается первый регистр счетчик, опять начинает набираться TCNT0 и т.д. пока не обнулится весь счетчик, тогда упадет на 1 второй а те восстановятся и т.п.). 
И твоя задача просто периодически (1 такт таймера - около 1000 тактов микросхемы в моем случае, а забьет он 8-битный регистр только через четверть миллиона тактов микросхемы, когда уже пройдут тысячи итераций цикла основного программы, так что не важно где его проверять) проверять, не набрался ли таймер до нужного значения. То есть таймер работает ПАРАЛЛЕЛЬНО твоему коду, что хорошо, так как позволяет в это время делать что-то еще - проверять кнопки например, выводить текущее время и т.п. А в случае измерения без таймера ты тратил кусок кода на это, во время чего понятно другой код НЕ выполняется. А таймер работает сам, его нужно только задать в начале, настроить на частоту нужную, и проверять периодически в программе. 
То есть не надо сидеть высчитывать сколько там циклов надо, париться что параллельно ничего не делается а как раз в это время могли нажать что-то и т.п.
Таймеры, конечно большей разрядности, во всех процессорах для ПК и в микросхеме BIOS есть уже десятки лет, в микроконтроллерах по разному бывает, в AT90S1200 например есть.
Вот собственно схема цифровых часов:

Руководствуясь соображениями перфекционизма, а не "побыстрее" старался пилить.
Тут стробирование сделано - в данный момент вывод цифры на один индикатор, но они чередуются с частотой ~50Hz так что глаз не различает, для экономии выводов микросхемы. Выбор индикатора нижней линией, на базе биполярного NPN-транзистора которой 1 есть, реализуется, транзистор тогда открывается и ток идет, иначе он как сопротивление огромное работает.
выбор индикатора не тупо "тот на линии которого 1 выбираем, на остальных 0", тогда нужно было б 4 линии для выбора 1 из 4. 
тут выбор по двоичному коду сделан при помощи декодера, то бишь 2 линии дают выбрать 4 индикатора (00, 01, 10, 11), N линий - 2^N индикаторов, а в первом способе N линий дают только N индикаторов. 
Декодер на 2 вентилях "НЕ" и 4 "И" запилен.
Ну и три кнопки - при нажатии SET два разряда (по умолчанию например часы) начинают мигать, показывая что ты их настраиваешь. Кнопка INC увеличивает на 1, а кнопка PUSH меняет настраиваемую пару с часов на минуты и наоборот. Нажатие SET еще раз прекращает мигание и возвращает ход времени.
Между часами и минутами два светодиода ":" делают для формата "ХХ:YY".

Пользователь который их на руку напялит видит время в формате "XX:XX" и сбоку три кнопки для настройки.
Два вывода порта D еще свободны для будующих расширений - например, подсветки или еще чего. Будильник я пока понятия не имею как запилить.

Код прикрепил, там совершенно не сделана пока секция настройки, и допилить Display надо еще.

--
04/04/2014
